{"version":3,"file":"static/js/472.9950fb9e.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n   return (\n      <img style={{display: \"block\", width: \"250px\", height: \"250px\", \n      objectFir: \"contain\", margin: \"0 auto\"}} src={img} alt=\"Error\" />\n   )\n}\n\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\n\nimport { useParams, Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\n\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n   const { comicId } = useParams();\n   const [comic, setComic] = useState({});\n   const {loading, error, getComic, clearError} = useMarvelService();\n\n   useEffect(() => {\n      updateComic();\n   }, [comicId])\n\n   const onComicLoaded = (comic) => {\n      setComic(comic);\n   }\n\n   const updateComic = () => {\n      clearError();\n      getComic(comicId)\n         .then(onComicLoaded);\n   }\n\n   const spinner = loading ? <Spinner /> : null;\n   const errorMessage = error ? <ErrorMessage /> : null;\n   const content = !(loading || error) ? <View comic={comic} /> : null;\n\n   return (\n      <>\n         {spinner}\n         {errorMessage}\n         {content}\n      </>\n   )\n}\n\nconst View = ({comic}) => {\n   const { title, thumbnail, description, pageCount, language, price } = comic;\n\n   return (\n      <div className=\"single-comic\">\n         <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\n         <div className=\"single-comic__info\">\n            <h2 className=\"single-comic__name\">{title}</h2>\n            <p className=\"single-comic__descr\">{description}</p>\n            <p className=\"single-comic__descr\">{pageCount}</p>\n            <p className=\"single-comic__descr\">Language: {language}</p>\n            <div className=\"single-comic__price\">{price}</div>\n         </div>\n         <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n      </div>\n   )\n}\n\nexport default SingleComicPage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n   const {loading, error, request, clearError} = useHttp();\n\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n   const _apiKey = 'apikey=b1ee04d358e33edb238945fb86acb66e';\n   const _baseOffset = 210;\n\n   const getAllCharacters = async (offset = _baseOffset) => {\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n      return res.data.results.map(_transformCharacter);\n   }\n\n   const getCharacter = async (id) => {\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n      return _transformCharacter(res.data.results[0]);\n   } \n\n   const getAllComics = async (offset = 0) => {\n      const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n      return res.data.results.map(_transformComics);\n   }\n\n   const getComic = async (id) => {\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n      return _transformComics(res.data.results[0]);\n   }\n\n   const _transformCharacter = (char) => {\n      return {\n         id: char.id,\n         name: char.name,\n         description: char.description ? `${char.description.slice(0, 210)}...` : 'Sorry, but did not find any information about this character yet(',\n         thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\n         homepage: char.urls[0].url,\n         comics: char.comics.items,\n      }\n   }\n\n   const _transformComics = (comics) => {\n      return {\n         id: comics.id,\n         title: comics.title,\n         description: comics.description || 'There is no description',\n         pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n         thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n         language: comics.textObjects.language || 'en-us',\n         price: comics.prices.price ? `${comics.prices.price}$` : 'not available',\n         homepage: comics.urls[0].url,\n      }\n   }\n\n   return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic};\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n   const [loading, setLoading] = useState(false);\n   const [error, setError] = useState(null);\n\n   const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n      setLoading(true);\n\n      try {\n         const response = await fetch(url, {method, body, headers});\n         const data = await response.json();\n   \n         if (!response.ok) {\n            throw new Error(`Couldn't fetch ${url}, status: ${response.status}`)\n         }\n\n         setLoading(false);\n         return data;\n\n      } catch (e) {\n         setLoading(false);\n         setError(e.message);\n         throw e;\n      }\n   }, []);\n\n   const clearError = useCallback(() => setError(null), []);\n   \n   return {loading, request, error, clearError};\n};"],"names":["style","display","width","height","objectFir","margin","src","img","alt","View","comic","title","thumbnail","description","pageCount","language","price","className","to","comicId","useParams","useState","setComic","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","onComicLoaded","then","spinner","Spinner","errorMessage","ErrorMessage","content","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","json","data","ok","Error","status","message","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getAllComics","_transformComics","char","name","slice","path","extension","homepage","urls","comics","items","textObjects","prices"],"sourceRoot":""}